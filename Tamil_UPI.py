import os
import re
import tempfile
import pandas as pd
import streamlit as st
import fitz  # PyMuPDF
import google.generativeai as genai

# Streamlit Secrets-ро▓рпН роЗро░рпБроирпНродрпБ API key роПро▒рпНро▒ро▓рпН
try:
    GEMINI_API_KEY = st.secrets["AIzaSyB18ifF7apBJR1mQKxg9HBdA89TEMn5C3I"]
except Exception:
    st.error("тЪая╕П GEMINI_API_KEY Streamlit Secrets-ро▓рпН роЗро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ secrets.toml-ро▓рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.")
    st.stop()

genai.configure(api_key=GEMINI_API_KEY)

# Streamlit UI роЕроорпИрокрпНрокрпБ
st.set_page_config(page_title="SmartSpend AI", page_icon="ЁЯТ░", layout="wide")

st.markdown("""
    <style>
    .main-title { text-align: center; font-size: 34px; font-weight: bold; color: #4CAF50; }
    .sub-title { text-align: center; font-size: 18px; color: #ddd; margin-bottom: 20px; }
    .result-card { background: rgba(0, 150, 136, 0.1); padding: 15px; border-radius: 8px; margin-bottom: 10px; }
    .success-banner { background: linear-gradient(to right, #2E7D32, #1B5E20); color: white;
                      padding: 15px; font-size: 18px; border-radius: 8px; text-align: center; font-weight: bold; }
    </style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="main-title">ЁЯТ░ SmartSpend AI</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-title">роЙроЩрпНроХро│рпН ро╡роЩрпНроХро┐ рокро░ро┐ро╡ро░рпНродрпНродройрпИ PDF-роР рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН, роирпБрогрпНрогро▒ро┐ро╡рпБ роиро┐родро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпИ рокрпЖро▒рпБроЩрпНроХро│рпН</p>', unsafe_allow_html=True)

st.sidebar.title("тД╣я╕П роЗроирпНрод роХро░рпБро╡ро┐ роОрокрпНрокроЯро┐ рокропройрпНрокроЯрпБродрпНродрпБро╡родрпБ?")
st.sidebar.write("- роЙроЩрпНроХро│рпН ро╡роЩрпНроХро┐ роЕро▒ро┐роХрпНроХрпИ PDF-роР рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.")
st.sidebar.write("- PDF роХроЯро╡рпБроЪрпНроЪрпКро▓рпН роЗро░рпБроирпНродро╛ро▓рпН, роЕродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.")
st.sidebar.write("- роЪро░ро┐ропро╛рой роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯрпБроорпН ро╡ро░рпИ 'INCORRECT PASSWORD' роОрой роХро╛роЯрпНроЯрокрпНрокроЯрпБроорпН.")
st.sidebar.write("- AI-ропро╛ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯ роиро┐родро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпИ рокрпЖро▒рпБроЩрпНроХро│рпН.")

uploaded_file = st.file_uploader("ЁЯУВ PDF роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН", type=["pdf"])
pdf_password = st.text_input("ЁЯФР PDF роХроЯро╡рпБроЪрпНроЪрпКро▓рпН (родро╡ро┐ро░рпНроХрпНроХро▓ро╛роорпН)", type="password") if uploaded_file else ""

def extract_text_from_pdf(file_path, pdf_password=""):
    try:
        doc = fitz.open(file_path)
        if doc.is_encrypted:
            if not pdf_password:
                doc.close()
                return None, "тЭМ роХроЯро╡рпБроЪрпНроЪрпКро▓рпН родрпЗро╡рпИрокрпНрокроЯрпБроХро┐ро▒родрпБ."
            if not doc.authenticate(pdf_password):
                doc.close()
                return None, "тЭМ родро╡ро▒ро╛рой роХроЯро╡рпБроЪрпНроЪрпКро▓рпН. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН."
        all_text = ""
        for page in doc:
            all_text += page.get_text() + "\n"
        doc.close()

        pattern = re.compile(r"""
            (\d{2}-\d{2}-\d{4})\s+                # родрпЗродро┐ (dd-mm-yyyy)
            ([A-Z\*\/\-]+)?\s*                    # роорпБро▒рпИ (optional)
            ((?:UPI|NEFT|RTGS|IMPS|CHEQUE|ATM|B/F|SBIN|[A-Za-z0-9@\/\-\.\s]+?))\s+  # ро╡ро┐ро╡ро░роЩрпНроХро│рпН
            ([\d,]+\.\d{2})?\s*                   # ро╡рпИрокрпНрокрпБ (optional)
            ([\d,]+\.\d{2})?\s*                   # рокрогроорпН роОроЯрпБродрпНродро▓рпН (optional)
            ([\d,]+\.\d{2})                       # роЗро░рпБрокрпНрокрпБ (balance)
        """, re.VERBOSE)

        matches = pattern.findall(all_text)
        if not matches:
            return None, "тЪая╕П PDF-роЗро▓рпН рокрпКро░рпБродрпНродрооро╛рой рокро░ро┐ро╡ро░рпНродрпНродройрпИ родро░ро╡рпБ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ."

        data = []
        previous_balance = None

        for m in matches:
            date = m[0]
            mode = m[1].strip() if m[1] else ""
            particulars = m[2].replace('\n', ' ').strip()
            deposits = float(m[3].replace(',', '')) if m[3] else 0.0
            withdrawals = float(m[4].replace(',', '')) if m[4] else 0.0
            balance = float(m[5].replace(',', ''))

            if previous_balance is not None:
                diff = round(balance - previous_balance, 2)
                if deposits == 0.0 and withdrawals == 0.0:
                    deposits = diff if diff > 0 else 0.0
                    withdrawals = abs(diff) if diff < 0 else 0.0

            data.append({
                "Date": date,
                "Mode": mode,
                "Particulars": particulars,
                "Deposits": deposits,
                "Withdrawals": withdrawals,
                "Balance": balance
            })
            previous_balance = balance

        df = pd.DataFrame(data)
        return df, None

    except Exception as e:
        return None, f"тЪая╕П рокро┐ро┤рпИ: {str(e)}"

def analyze_financial_data(df: pd.DataFrame):
    model = genai.GenerativeModel("learnlm-1.5-pro-experimental")
    data_text = df.to_string(index=False)
    prompt = f"""
    роХрпАро┤рпЗ роЙро│рпНро│ ро╡роЩрпНроХро┐ рокро░ро┐ро╡ро░рпНродрпНродройрпИ ро╡ро░ро▓ро╛ро▒рпБ родро░ро╡рпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роиро┐родро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпИ роЪрпЖропрпНроХ:

    {data_text}

    роХрпАро┤рпНроХро╛рогрпБроорпН родро▓рпИрокрпНрокрпБроХро│ро┐ро▓рпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН:

    **роиро┐родро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпБроХро│рпН**

    - рооро╛родро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН рооро▒рпНро▒рпБроорпН роЪрпЖро▓ро╡рпБроХро│рпН
    - роЪрпЗрооро┐рокрпНрокрпБ ро╡рпАродроорпН
    - роорпБроХрпНроХро┐роп роЪрпЖро▓ро╡рпБроХрпН рокро┐ро░ро┐ро╡рпБроХро│рпН
    - роЪрпЖро▓ро╡рпБроХрпН роХрпИропро╛ро│рпНро╡ро┐ро▓рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН рооро▒рпНро▒рпБроорпН рокрпЛроХрпНроХрпБроХро│рпН
    """
    try:
        response = model.generate_content(prompt)
        if response and response.text:
            return response.text.strip()
        else:
            return "тЪая╕П роиро┐родро┐ родро░ро╡рпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ."
    except Exception as e:
        return f"тЪая╕П AI рокроХрпБрокрпНрокро╛ропрпНро╡рпБ рокро┐ро┤рпИ: {str(e)}"

if uploaded_file:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        tmp_file.write(uploaded_file.read())
        temp_pdf_path = tmp_file.name

    with st.spinner("ЁЯУД PDF-роЗро▓рпН роЗро░рпБроирпНродрпБ роЙро░рпИ роОроЯрпБроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ..."):
        df, error_msg = extract_text_from_pdf(temp_pdf_path, pdf_password)

    if error_msg:
        st.error(error_msg)
    elif df is None or df.empty:
        st.warning("тЪая╕П PDF-роЗро▓рпН рокрпКро░рпБродрпНродрооро╛рой родроХро╡ро▓рпН роОроЯрпБроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. ро╡рпЗро▒рпБ роХрпЛрокрпНрокрпИ роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН.")
    else:
        st.success("тЬЕ PDF ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ!")
        st.dataframe(df)

        with st.spinner("ЁЯза AI роЙроЩрпНроХро│рпН роиро┐родро┐ родро░ро╡рпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ..."):
            insights = analyze_financial_data(df)

        st.subheader("ЁЯУК роиро┐родро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЕро▒ро┐роХрпНроХрпИ")
        st.markdown(f'<div class="result-card"><b>ЁЯУД {uploaded_file.name} - роиро┐родро┐ роЕро▒ро┐роХрпНроХрпИ</b></div>', unsafe_allow_html=True)
        st.write(insights)
        st.markdown('<div class="success-banner">ЁЯОЙ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐роирпНродродрпБ! роЙроЩрпНроХро│рпН роиро┐родро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпИ роЪро┐ро▒рокрпНрокро╛роХрпНроХрпБроЩрпНроХро│рпН. ЁЯЪА</div>', unsafe_allow_html=True)
        st.snow()

    try:
        os.remove(temp_pdf_path)
    except Exception:
        st.warning("тЪая╕П родро▒рпНроХро╛ро▓ро┐роХ роХрпЛрокрпНрокрпБ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. PDF-роР родро┐ро▒роирпНродрпБро│рпНро│ ро╡ро┐рогрпНроЯрпЛроХрпНроХро│рпИ роорпВроЯро╡рпБроорпН.")
else:
    st.info("ЁЯУМ роорпЗро▓рпЗ PDF роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН рооро▒рпНро▒рпБроорпН роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ (родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН) роЙро│рпНро│ро┐роЯро╡рпБроорпН.")
